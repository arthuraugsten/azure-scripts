#!/bin/bash

set -e

# Set default AZ CLI subscription.
az account set --subscription "<subscription-name>"

printSyntax(){
    printf "\nUSAGE:\n"
    printf "$0 --group-short-name \"<group-short-name>\" --group-sequence \"<group-sequence>\" --resource-short-name \"<resource-short-name>\" --resource-sequence \"<resource-sequence\" --environment <environment> [--resource-region \"<resource-region>\"]\n"
    printf "\nOPTIONS:\n"
    printf "%s\n" "-h, --help              show brief help"
    printf "%s\n" "--group-short-name      specify  which group short name should be used on the name composition."
    printf "%s\n" "--group-sequence        specify which resource group sequence should be used on the name composition."
    printf "%s\n" "--resource-short-name   specify which resource short name should be used on the name composition."
    printf "%s\n" "--resource-sequence     specify which app sequence should be used on the name composition."
    printf "%s\n" "--environment           specify which environment should be used on the name composition. Allowed valeues: d/q/t/p"
    printf "%s\n" "--resource-region       optional, specify which region should be use on the name composition. Defaults to 'eus2'"
    printf "\n%s\n" "EXAMPLES:"
    printf "%s\n" "With default usage:"
    printf "%s\n" "$0 --group-short-name \"smplint\" --group-sequence \"01\" --resource-short-name \"bitest\" --resource-sequence \"01\" --environment d"
    printf "\n%s\n" "With custom region:"
    printf "%s\n" "$0 --group-short-name \"smplint\" --group-sequence \"01\" --resource-short-name \"bitest\" --resource-sequence \"01\" --environment d --resource-region \"eus2\""
}

GROUP_SHORT_NAME=""
GROUP_SEQUENCE=""
RESOURCE_SHORT_NAME=""
RESOURCE_SEQUENCE=""
ENVIRONMENT=""
RESOURCE_REGION="eus2"

for arg in "$@"; do
  case "$1" in
  --help|-h)
    printSyntax
    exit 0
    ;;
  --group-short-name)
    shift
    GROUP_SHORT_NAME="$1"
    shift
    ;;
  --group-sequence)
    shift
    GROUP_SEQUENCE="$1"
    shift
    ;;
  --resource-short-name)
    shift
    RESOURCE_SHORT_NAME="$1"
    shift
    ;;
  --resource-sequence)
    shift  
    RESOURCE_SEQUENCE="$1"
    shift
    ;;
  --resource-region)
    shift  
    RESOURCE_REGION="$1"
    shift
    ;;
  --environment)
    shift  
    ENVIRONMENT="$1"
  esac
done

if [ "$GROUP_SHORT_NAME" = "" ]
then
  echo "Missing group short name"
  printSyntax
	exit 1
fi
if [ "$GROUP_SEQUENCE" = "" ]
then
	echo "Missing group sequence"
  printSyntax
	exit 1
fi
if [ "$RESOURCE_SHORT_NAME" = "" ]
then
  echo "Missing resource short name"
  printSyntax
	exit 1
fi
if [ "$RESOURCE_SEQUENCE" = "" ]
then
	echo "Missing resource sequence"
  printSyntax
	exit 1
fi
if [ "$ENVIRONMENT" = "" ]
then
	echo "Missing environment"
  printSyntax
	exit 1
fi
if [ "$RESOURCE_REGION" = "" ]
then
	echo "Missing resource region"
  printSyntax
	exit 1
fi

RESOURCE_GROUP="${RESOURCE_REGION}rg${GROUP_SHORT_NAME}${ENVIRONMENT}${GROUP_SEQUENCE}"
APP_NAME="${RESOURCE_REGION}as${RESOURCE_SHORT_NAME}${ENVIRONMENT}${RESOURCE_SEQUENCE}"

APP_SERVICE_URL=`az webapp list -g $RESOURCE_GROUP -o tsv --query "[?name == '$APP_NAME'].defaultHostName|[0]"`

# Validate if the App was found to prevent errors.
if [ "$APP_SERVICE_URL" = "" ]
then
	echo "No App Service found."
  printSyntax
	exit 1
fi

# WebApps require a replyUrl - this is a known suffix for EasyAuth
REPLY_URL="https://${APP_SERVICE_URL}/.auth/login/aad/callback"

# Validate if already exists an app registration with the requested name.
EXIST_APP_REGISTRATION=`az ad app list --display-name "${APP_NAME}" --query [0]`
if [ "$EXIST_APP_REGISTRATION" != "" ]
then
	echo "An App Registration already exists with the name: ${APP_NAME}"
  printSyntax
	exit 1
fi

APP_ID=`az ad app create --display-name $APP_NAME --sign-in-audience AzureADMyOrg --web-home-page-url "https://${APP_SERVICE_URL}" --web-redirect-uris $REPLY_URL -o tsv --query appId`

az ad sp create -o none --id $APP_ID
sleep 5

az ad sp update -o none --id $APP_ID --set appRoleAssignmentRequired=true
sleep 5

# Add permission for User.Read on MS Graph (static guids)
az ad app permission add -o none --id $APP_ID --api 00000003-0000-0000-c000-000000000000 --api-permissions e1fe6dd8-ba31-4d61-89e7-88639da4683d=Scope
sleep 5

az ad app permission grant -o none --id $APP_ID --api 00000003-0000-0000-c000-000000000000 --scope User.Read
sleep 5

az ad app permission admin-consent -o none --id $APP_ID
sleep 5

az webapp auth microsoft update -g $RESOURCE_GROUP -n $APP_NAME --client-id $APP_ID

CLIENT_SECRET=`az ad app credential reset --id $APP_ID --display-name "Easy Auth [autogenerated]" --append --years 1 --query "password" -o tsv`

KEY_VAULT_NAME="${RESOURCE_REGION}kv${GROUP_SHORT_NAME}${ENVIRONMENT}${GROUP_SEQUENCE}"
NEW_EXPIRATION_DATE=$(date '+%Y-%m-%dT%H:%M:%SZ' -d "+1 year")
az keyvault secret set -o none -n "easyauth-client-secret" --vault-name $KEY_VAULT_NAME --description "Used on $APP_NAME for Easy Auth" --disabled false -e utf-8  --expires $NEW_EXPIRATION_DATE --value $CLIENT_SECRET

unset CLIENT_SECRET